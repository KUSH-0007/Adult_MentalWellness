/**
 * @fileoverview Firestore Security Rules for SentiHeal.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to resources like guided exercises and crisis contacts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /users/{userId}/conversations/{messageId}: Stores conversation history, accessible only to the user.
 * - /users/{userId}/emotionData/{emotionDataId}: Stores emotion data, accessible only to the user.
 * - /guidedExercises/{guidedExerciseId}: Stores guided exercises, publicly readable. Write access is not defined in the current schema and should be secured appropriately.
 * - /crisisContacts/{crisisContactId}: Stores crisis contacts, publicly readable. Write access is not defined in the current schema and should be secured appropriately.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's ID in the path.
 * - Public read access is granted to guided exercises and crisis contacts. Write access to these collections should be restricted based on application needs (e.g., admin-only).
 * - Data validation is minimal in this prototype, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * This ruleset leverages path-based authorization (userId in the path) to avoid costly `get()` calls and enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile documents. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (update) User with ID 'user456' cannot update the profile for 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for conversation messages under a specific user. Only the user can read or write their own conversation messages.
     * @path /users/{userId}/conversations/{messageId}
     * @allow (create) User with ID 'user123' can create a message in their conversation.
     *   - request.auth.uid: 'user123'
     * @allow (get) User with ID 'user123' can read a message in their conversation.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a message in 'user123's conversation.
     *   - request.auth.uid: 'user456'
     * @deny (update) User with ID 'user456' cannot update a message in 'user123's conversation.
     *   - request.auth.uid: 'user456'
     * @principle Restricts access to a user's own conversation history.
     */
    match /users/{userId}/conversations/{messageId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for emotion data associated with a specific user. Only the user can read or write their emotion data.
     * @path /users/{userId}/emotionData/{emotionDataId}
     * @allow (create) User with ID 'user123' can create emotion data associated with their account.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get) User with ID 'user123' can read emotion data associated with their account.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create emotion data for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @deny (update) User with ID 'user456' cannot update emotion data for 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes, validates relational integrity between EmotionData and User, restricts access to a user's own data.
     */
    match /users/{userId}/emotionData/{emotionDataId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to guided exercises. Write access is not defined and should be secured based on application needs (e.g., admin-only).
     * @path /guidedExercises/{guidedExerciseId}
     * @allow (get) Any user (or unauthenticated user) can read a guided exercise.
     * @allow (list) Any user (or unauthenticated user) can list guided exercises.
     * @deny (create) No one can create a guided exercise (explicitly denied - adjust as needed).
     *   - request.auth.uid: 'user123' (doesn't matter, always denied in this example)
     * @deny (update) No one can update a guided exercise (explicitly denied - adjust as needed).
     *   - request.auth.uid: 'user123' (doesn't matter, always denied in this example)
     * @principle Provides public read access, enforces explicit denial of write operations.
     */
    match /guidedExercises/{guidedExerciseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to crisis contacts. Write access is not defined and should be secured based on application needs (e.g., admin-only).
     * @path /crisisContacts/{crisisContactId}
     * @allow (get) Any user (or unauthenticated user) can read a crisis contact.
     * @allow (list) Any user (or unauthenticated user) can list crisis contacts.
     * @deny (create) No one can create a crisis contact (explicitly denied - adjust as needed).
     *   - request.auth.uid: 'user123' (doesn't matter, always denied in this example)
     * @deny (update) No one can update a crisis contact (explicitly denied - adjust as needed).
     *   - request.auth.uid: 'user123' (doesn't matter, always denied in this example)
     * @principle Provides public read access, enforces explicit denial of write operations.
     */
    match /crisisContacts/{crisisContactId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}